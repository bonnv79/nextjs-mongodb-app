import { useState } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import { Button, PageHeader, Space, Spin, Table } from 'antd';
import { deleteAPI, getAPI, getUrl, putAPI, sleep } from 'utils';
import { API_POSTS } from 'constants/apiPath';
import { useRouter } from 'next/router';
import { ROUTER_PATH } from 'constants/routerPath';
import { FIRST_PAGE, PAGE_SIZE } from 'constants';
import { EllipsisMiddle } from 'components';

export default function Posts({ data: initData = [] }) {
  const router = useRouter();
  const [pagination, setPagination] = useState({ current: FIRST_PAGE, pageSize: PAGE_SIZE });
  const [selected, setSelected] = useState({});
  const [data, setData] = useState(initData);
  const [loading, setLoading] = useState(false);
  // console.log(data)
  // console.log(selected)

  const refreshData = () => {
    getAPI(API_POSTS, {}, (res) => {
      setData(res.data);
      setLoading(false);
    }, () => {
      setLoading(false);
    });
  }

  const handleFreshData = () => {
    getAPI(API_POSTS, {}, (res) => {
      setData(res.data);
    }, null, setLoading);
  }

  const publishPost = (postId) => {
    setLoading(true);
    putAPI(API_POSTS, {
      body: postId,
    }, () => {
      refreshData();
    }, () => {
      setLoading(false);
    });
  };

  const deletePost = (postId) => {
    setLoading(true);
    deleteAPI(API_POSTS, {
      body: JSON.stringify({
        id: postId
      }),
    }, () => {
      refreshData();
    }, () => {
      setLoading(false);
    });
  };

  const deleteMutiPost = () => {
    setLoading(true);
    deleteAPI(API_POSTS, {
      body: JSON.stringify(selected),
    }, async () => {
      await sleep(200);
      refreshData();
    }, () => {
      setLoading(false);
    });
  };

  const columns = [
    {
      title: 'STT',
      dataIndex: 'stt',
      align: 'center',
      render: (value, row, index) => {
        const { current = FIRST_PAGE, pageSize = PAGE_SIZE } = pagination || {};
        return (current - 1) * pageSize + index + 1;
      },
    },
    {
      dataIndex: '_id',
      title: 'Id',
      render: (value) => {
        return (
          <EllipsisMiddle suffixCount={10}>
            {value}
          </EllipsisMiddle>
        );
      },
    },
    {
      dataIndex: 'title',
      title: 'Title',
      render: (value) => {
        return (
          <EllipsisMiddle suffixCount={10}>
            {value}
          </EllipsisMiddle>
        );
      },
    },
    {
      dataIndex: 'body',
      title: 'Body',
      render: (value) => {
        return (
          <EllipsisMiddle suffixCount={10}>
            {value}
          </EllipsisMiddle>
        );
      },
    },
    {
      title: 'Action',
      key: 'action',
      align: 'center',
      render: (_, record) => (
        <Space size="middle">
          <Button size="small" shape="round" disabled={record.published} onClick={() => publishPost(record._id)}>
            Publish
          </Button>
          <Button size="small" shape="round" onClick={() => deletePost(record._id)}>
            Delete
          </Button>
        </Space>
      ),
    },
  ]

  const rowSelection = {
    onChange: (selectedRowKeys) => {
      setSelected(selectedRowKeys);
    },
  };

  return (
    <div>
      <Head>
        <title>Posts</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Spin tip="Loading..." spinning={loading}>
        <PageHeader
          ghost={false}
          onBack={() => router.back()}
          title="Posts"
          subTitle={`Total items: ${data.length}`}
          extra={[
            <Button key="1" onClick={deleteMutiPost} disabled={selected.length <= 0}>Delete</Button>,
            <Button key="2" onClick={handleFreshData}>Refresh</Button>,
            <Link key="3" href={ROUTER_PATH.ADD_POST}>
              <Button type="primary">Create</Button>
            </Link>,
          ]}
        >
          <Table
            rowKey="_id"
            rowSelection={{
              type: 'checkbox',
              ...rowSelection,
            }}
            columns={columns}
            dataSource={data}
            size="small"
            onChange={(pagination, filters, sorter, extra) => {
              setPagination(pagination);
            }}
          />
        </PageHeader>
      </Spin>
    </div>
  );
}

Posts.getInitialProps = async (ctx) => {
  const res = await fetch(getUrl(API_POSTS, ctx));
  const json = await res.json();
  return {
    data: json.data,
    message: json.message
  }
}
